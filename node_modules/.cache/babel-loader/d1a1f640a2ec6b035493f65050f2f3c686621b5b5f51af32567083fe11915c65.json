{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdalb\\\\Desktop\\\\dramainteractive\\\\dramainteractive\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Message from '../Components/Message';\nimport Sender from '../Components/Sender';\nimport { Route, Routes } from 'react-router-dom';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction Chat() {\n  _s();\n  const [username, setUsername] = useState('Anonymous');\n  const [messages, setMessages] = useState([]);\n  const [audienceChat, setAudienceChat] = useState(false);\n  async function setUserName() {}\n  useEffect(() => {\n    // Subscribe to real-time inserts\n    const channels = supabase.channel('custom-inserts').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages'\n    }, payload => {\n      const newMessage = {\n        message: payload.new.message,\n        sender: payload.new.sender,\n        owner: payload.new.sender === username\n      };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    }).subscribe();\n    const controls = supabase.channel('controller').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'controls'\n    }, payload => {\n      const canChat = payload.new.audienceChat;\n      setAudienceChat(canChat);\n    }).subscribe();\n    return () => {\n      // Unsubscribe from channel when component unmounts\n      channels.unsubscribe();\n    };\n  }, [username]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'grey',\n        fontSize: '1.5rem',\n        margin: '5px'\n      },\n      onClick: () => setUsername(prompt('Enter a username')),\n      children: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chat\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start'\n      },\n      children: messages.map((msg, index) => {\n        return /*#__PURE__*/_jsxDEV(Message, {\n          message: msg.message,\n          sender: msg.sender,\n          owner: msg.sender === username\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      username: username,\n      canChat: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Chat, \"9GABjO/5keZ59/xoYiJdNMprqxc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","Message","Sender","Route","Routes","createClient","jsxDEV","_jsxDEV","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Chat","_s","username","setUsername","messages","setMessages","audienceChat","setAudienceChat","setUserName","channels","channel","on","event","schema","table","payload","newMessage","message","new","sender","owner","prevMessages","subscribe","controls","canChat","unsubscribe","children","style","color","fontSize","margin","onClick","prompt","fileName","_jsxFileName","lineNumber","columnNumber","className","display","flexDirection","alignItems","justifyContent","map","msg","index","_c","$RefreshReg$"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Chat.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport Message from '../Components/Message';\r\nimport Sender from '../Components/Sender';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\n\r\n\r\nimport { createClient } from '@supabase/supabase-js';\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Chat() {\r\n    const [username, setUsername] = useState('Anonymous');\r\n    const [messages, setMessages] = useState([]);\r\n    const [audienceChat, setAudienceChat] = useState(false);\r\n\r\n    async function setUserName(){\r\n    \r\n    }\r\n\r\n    useEffect(() => {\r\n        // Subscribe to real-time inserts\r\n        const channels = supabase.channel('custom-inserts')\r\n            .on(\r\n                'postgres_changes',\r\n                { event: 'INSERT', schema: 'public', table: 'messages' },\r\n                (payload) => {\r\n                    const newMessage = {\r\n                        message: payload.new.message,\r\n                        sender: payload.new.sender,\r\n                        owner: payload.new.sender === username\r\n                    };\r\n                    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n                }\r\n            )\r\n            .subscribe();\r\n\r\n        const controls = supabase.channel('controller')\r\n            .on(\r\n                'postgres_changes',\r\n                { event: 'INSERT', schema: 'public', table: 'controls' },\r\n                (payload) => {\r\n                    const canChat = payload.new.audienceChat;\r\n                    setAudienceChat(canChat);\r\n                }\r\n            )\r\n            .subscribe();\r\n\r\n        return () => {\r\n            // Unsubscribe from channel when component unmounts\r\n            channels.unsubscribe();\r\n        };\r\n    }, [username]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <h1 style={{\r\n                color: 'grey',\r\n                fontSize: '1.5rem',\r\n                margin: '5px',\r\n            }} onClick={() => setUsername(prompt('Enter a username'))}>{username}</h1>\r\n            <div className=\"Chat\" style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: 'flex-start',\r\n                justifyContent: 'flex-start',\r\n            }}>\r\n                {messages.map((msg, index) => {\r\n                    return (\r\n                        <Message\r\n                            key={index}\r\n                            message={msg.message}\r\n                            sender={msg.sender}\r\n                            owner={msg.sender === username}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n            <Sender username={username} canChat={true} />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}