{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdalb\\\\Desktop\\\\dramainteractive\\\\dramainteractive\\\\src\\\\pages\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport { Route, Routes } from 'react-router-dom';\nimport { createClient } from '@supabase/supabase-js';\nimport ActButton from \"../Components/ActButton\";\nimport ActGraph from \"../Components/ActGraph\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction Board(props) {\n  _s();\n  const [message, setMessage] = useState(\":)\");\n  useEffect(() => {\n    // Join a room/topic. Can be anything except for 'realtime'.\n    const channelA = supabase.channel('actorMessage');\n\n    // Simple function to log any messages we receive\n    function messageReceived(payload) {\n      setMessage(payload.payload.message);\n    }\n\n    // Subscribe to the Channel\n    channelA.on('broadcast', {\n      event: 'actorMessage'\n    }, payload => messageReceived(payload)).subscribe();\n\n    // Unsubscribe when the component unmounts\n    return () => {\n      channelA.unsubscribe();\n    };\n  }, []); // Empty dependency array means this effect runs only once, on mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: '100vw',\n        height: '100vh',\n        backgroundColor: 'black',\n        color: 'darkgrey',\n        alignContent: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden',\n        position: 'relative',\n        fontSize: '3vw'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Board, \"j90VbJRruaKp7TkRvT2jCvQQJeY=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Route","Routes","createClient","ActButton","ActGraph","jsxDEV","_jsxDEV","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Board","props","_s","message","setMessage","channelA","channel","messageReceived","payload","on","event","subscribe","unsubscribe","children","style","display","flexDirection","alignItems","width","height","backgroundColor","color","alignContent","justifyContent","overflow","position","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Board.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport ActButton from \"../Components/ActButton\";\r\nimport ActGraph from \"../Components/ActGraph\";\r\n\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Board(props) {\r\n    const [message, setMessage] = useState(\":)\");\r\n\r\n    useEffect(() => {\r\n        // Join a room/topic. Can be anything except for 'realtime'.\r\n        const channelA = supabase.channel('actorMessage');\r\n\r\n        // Simple function to log any messages we receive\r\n        function messageReceived(payload) {\r\n            setMessage(payload.payload.message);\r\n        }\r\n\r\n        // Subscribe to the Channel\r\n        channelA\r\n            .on(\r\n                'broadcast',\r\n                { event: 'actorMessage' },\r\n                (payload) => messageReceived(payload)\r\n            )\r\n            .subscribe();\r\n\r\n        // Unsubscribe when the component unmounts\r\n        return () => {\r\n            channelA.unsubscribe();\r\n        };\r\n    }, []); // Empty dependency array means this effect runs only once, on mount\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                width: '100vw',\r\n                height: '100vh',\r\n                backgroundColor: 'black',\r\n                color: 'darkgrey',\r\n                alignContent: 'center',\r\n                justifyContent: 'center',\r\n                overflow: 'hidden',\r\n                position: 'relative',\r\n                fontSize: '3vw',\r\n            }}>\r\n                <h1>{message}</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,YAAY;AACnB,SAASC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAChD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,WAAW,GAAG,kNAAkN;AACtO,MAAMC,QAAQ,GAAGT,YAAY,CAACO,WAAW,EAAEC,WAAW,CAAC;AAEvD,SAASE,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMmB,QAAQ,GAAGN,QAAQ,CAACO,OAAO,CAAC,cAAc,CAAC;;IAEjD;IACA,SAASC,eAAeA,CAACC,OAAO,EAAE;MAC9BJ,UAAU,CAACI,OAAO,CAACA,OAAO,CAACL,OAAO,CAAC;IACvC;;IAEA;IACAE,QAAQ,CACHI,EAAE,CACC,WAAW,EACX;MAAEC,KAAK,EAAE;IAAe,CAAC,EACxBF,OAAO,IAAKD,eAAe,CAACC,OAAO,CACxC,CAAC,CACAG,SAAS,CAAC,CAAC;;IAEhB;IACA,OAAO,MAAM;MACTN,QAAQ,CAACO,WAAW,CAAC,CAAC;IAC1B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIlB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACInB,OAAA;MAAKoB,KAAK,EAAE;QACRC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,UAAU,EAAE,QAAQ;QACpBC,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE,OAAO;QACfC,eAAe,EAAE,OAAO;QACxBC,KAAK,EAAE,UAAU;QACjBC,YAAY,EAAE,QAAQ;QACtBC,cAAc,EAAE,QAAQ;QACxBC,QAAQ,EAAE,QAAQ;QAClBC,QAAQ,EAAE,UAAU;QACpBC,QAAQ,EAAE;MACd,CAAE;MAAAb,QAAA,eACEnB,OAAA;QAAAmB,QAAA,EAAKV;MAAO;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB;EAAC,gBACR,CAAC;AAEX;AAAC5B,EAAA,CA/CQF,KAAK;AAAA+B,EAAA,GAAL/B,KAAK;AAiDd,eAAeA,KAAK;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}