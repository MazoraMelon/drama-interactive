{"ast":null,"code":"import{useEffect,useState}from\"react\";import\"../App.css\";import{Route,Routes}from'react-router-dom';import{createClient}from'@supabase/supabase-js';import ActButton from\"../Components/ActButton\";import ActGraph from\"../Components/ActGraph\";import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const supabaseUrl=\"https://jftaxymlbutkjoacvtbk.supabase.co\";const supabaseKey=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";const supabase=createClient(supabaseUrl,supabaseKey);function Board(props){const[message,setMessage]=useState(\":)\");useEffect(()=>{// Join a room/topic. Can be anything except for 'realtime'.\nconst channelA=supabase.channel('actorMessage');// Simple function to log any messages we receive\nfunction messageReceived(payload){alert(\"Got it\");setMessage(payload.payload.message);}// Subscribe to the Channel\nchannelA.on('broadcast',{event:'actorMessage'},payload=>messageReceived(payload)).subscribe();// Unsubscribe when the component unmounts\nreturn()=>{channelA.unsubscribe();};},[]);// Empty dependency array means this effect runs only once, on mount\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',width:'100vw',height:'100vh',backgroundColor:'#1f1f1f',color:'white',alignContent:'center',justifyContent:'center',overflow:'hidden',position:'relative',fontSize:'3vw'},children:/*#__PURE__*/_jsx(\"h1\",{children:message})})});}export default Board;","map":{"version":3,"names":["useEffect","useState","Route","Routes","createClient","ActButton","ActGraph","jsx","_jsx","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Board","props","message","setMessage","channelA","channel","messageReceived","payload","alert","on","event","subscribe","unsubscribe","children","style","display","flexDirection","alignItems","width","height","backgroundColor","color","alignContent","justifyContent","overflow","position","fontSize"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Board.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport ActButton from \"../Components/ActButton\";\r\nimport ActGraph from \"../Components/ActGraph\";\r\n\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Board(props) {\r\n    const [message, setMessage] = useState(\":)\");\r\n\r\n    useEffect(() => {\r\n        // Join a room/topic. Can be anything except for 'realtime'.\r\n        const channelA = supabase.channel('actorMessage');\r\n\r\n        // Simple function to log any messages we receive\r\n        function messageReceived(payload) {\r\n            alert(\"Got it\");\r\n            setMessage(payload.payload.message);\r\n        }\r\n\r\n        // Subscribe to the Channel\r\n        channelA\r\n            .on(\r\n                'broadcast',\r\n                { event: 'actorMessage' },\r\n                (payload) => messageReceived(payload)\r\n            )\r\n            .subscribe();\r\n\r\n        // Unsubscribe when the component unmounts\r\n        return () => {\r\n            channelA.unsubscribe();\r\n        };\r\n    }, []); // Empty dependency array means this effect runs only once, on mount\r\n\r\n    return (\r\n        <>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                width: '100vw',\r\n                height: '100vh',\r\n                backgroundColor: '#1f1f1f',\r\n                color: 'white',\r\n                alignContent: 'center',\r\n                justifyContent: 'center',\r\n                overflow: 'hidden',\r\n                position: 'relative',\r\n                fontSize: '3vw',\r\n            }}>\r\n                <h1>{message}</h1>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAO,YAAY,CACnB,OAASC,KAAK,CAAEC,MAAM,KAAQ,kBAAkB,CAChD,OAASC,YAAY,KAAQ,uBAAuB,CACpD,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAC/C,MAAO,CAAAC,QAAQ,KAAM,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE9C,KAAM,CAAAC,WAAW,CAAG,0CAA0C,CAC9D,KAAM,CAAAC,WAAW,CAAG,kNAAkN,CACtO,KAAM,CAAAC,QAAQ,CAAGT,YAAY,CAACO,WAAW,CAAEC,WAAW,CAAC,CAEvD,QAAS,CAAAE,KAAKA,CAACC,KAAK,CAAE,CAClB,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGhB,QAAQ,CAAC,IAAI,CAAC,CAE5CD,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAAkB,QAAQ,CAAGL,QAAQ,CAACM,OAAO,CAAC,cAAc,CAAC,CAEjD;AACA,QAAS,CAAAC,eAAeA,CAACC,OAAO,CAAE,CAC9BC,KAAK,CAAC,QAAQ,CAAC,CACfL,UAAU,CAACI,OAAO,CAACA,OAAO,CAACL,OAAO,CAAC,CACvC,CAEA;AACAE,QAAQ,CACHK,EAAE,CACC,WAAW,CACX,CAAEC,KAAK,CAAE,cAAe,CAAC,CACxBH,OAAO,EAAKD,eAAe,CAACC,OAAO,CACxC,CAAC,CACAI,SAAS,CAAC,CAAC,CAEhB;AACA,MAAO,IAAM,CACTP,QAAQ,CAACQ,WAAW,CAAC,CAAC,CAC1B,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,mBACIlB,IAAA,CAAAE,SAAA,EAAAiB,QAAA,cACInB,IAAA,QAAKoB,KAAK,CAAE,CACRC,OAAO,CAAE,MAAM,CACfC,aAAa,CAAE,QAAQ,CACvBC,UAAU,CAAE,QAAQ,CACpBC,KAAK,CAAE,OAAO,CACdC,MAAM,CAAE,OAAO,CACfC,eAAe,CAAE,SAAS,CAC1BC,KAAK,CAAE,OAAO,CACdC,YAAY,CAAE,QAAQ,CACtBC,cAAc,CAAE,QAAQ,CACxBC,QAAQ,CAAE,QAAQ,CAClBC,QAAQ,CAAE,UAAU,CACpBC,QAAQ,CAAE,KACd,CAAE,CAAAb,QAAA,cACEnB,IAAA,OAAAmB,QAAA,CAAKX,OAAO,CAAK,CAAC,CACjB,CAAC,CACR,CAAC,CAEX,CAEA,cAAe,CAAAF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}