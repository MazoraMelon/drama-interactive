{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdalb\\\\Desktop\\\\dramainteractive\\\\dramainteractive\\\\src\\\\pages\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { createClient } from '@supabase/supabase-js';\nimport ActGraph from \"../Components/ActGraph\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction Board(props) {\n  _s();\n  const [acts, setActs] = useState([]);\n  const [votes, setVotes] = useState([]);\n  useEffect(() => {\n    async function fetchActs() {\n      const {\n        data,\n        error\n      } = await supabase.from('acts').select(\"*\");\n      if (error) {\n        console.error(\"Error fetching acts:\", error);\n      } else {\n        setActs(data);\n      }\n    }\n    fetchActs();\n  }, []);\n  useEffect(() => {\n    const channel = supabase.channel('votes');\n    const messageReceived = payload => {\n      setVotes([...votes, payload.payload.vote]);\n    };\n    channel.on('broadcast', {\n      event: 'vote'\n    }, payload => messageReceived(payload)).subscribe();\n    return () => {\n      channel.unsubscribe();\n    };\n  }, [votes]);\n  useEffect(() => {\n    if (votes.length > 0) {\n      const voteCounts = {};\n      votes.forEach(vote => {\n        if (voteCounts[vote.act_id]) {\n          voteCounts[vote.act_id]++;\n        } else {\n          voteCounts[vote.act_id] = 1;\n        }\n      });\n      let maxVotes = 0;\n      let mostVotedAct = null;\n      Object.keys(voteCounts).forEach(actId => {\n        if (voteCounts[actId] > maxVotes) {\n          maxVotes = voteCounts[actId];\n          mostVotedAct = acts.find(act => act.id === actId);\n        }\n      });\n      if (mostVotedAct) {\n        alert(`The act with the most votes is: ${mostVotedAct.name}`);\n      }\n    }\n  }, [votes, acts]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), acts.map(act => /*#__PURE__*/_jsxDEV(ActGraph, {\n      name: act.name,\n      votes: 0\n    }, act.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n}\n_s(Board, \"CcqQi6IyBi0Ea6+2zMFI/kxfR2g=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","createClient","ActGraph","jsxDEV","_jsxDEV","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Board","props","_s","acts","setActs","votes","setVotes","fetchActs","data","error","from","select","console","channel","messageReceived","payload","vote","on","event","subscribe","unsubscribe","length","voteCounts","forEach","act_id","maxVotes","mostVotedAct","Object","keys","actId","find","act","id","alert","name","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Board.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport ActGraph from \"../Components/ActGraph\";\r\n\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Board(props) {\r\n    const [acts, setActs] = useState([]);\r\n    const [votes, setVotes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchActs() {\r\n            const { data, error } = await supabase.from('acts').select(\"*\");\r\n            if (error) {\r\n                console.error(\"Error fetching acts:\", error);\r\n            } else {\r\n                setActs(data);\r\n            }\r\n        }\r\n        fetchActs();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const channel = supabase.channel('votes');\r\n\r\n        const messageReceived = (payload) => {\r\n            setVotes([...votes, payload.payload.vote]);\r\n        };\r\n\r\n        channel\r\n            .on(\r\n                'broadcast',\r\n                { event: 'vote' },\r\n                (payload) => messageReceived(payload)\r\n            )\r\n            .subscribe();\r\n\r\n        return () => {\r\n            channel.unsubscribe();\r\n        };\r\n    }, [votes]);\r\n\r\n    useEffect(() => {\r\n        if (votes.length > 0) {\r\n            const voteCounts = {};\r\n            votes.forEach((vote) => {\r\n                if (voteCounts[vote.act_id]) {\r\n                    voteCounts[vote.act_id]++;\r\n                } else {\r\n                    voteCounts[vote.act_id] = 1;\r\n                }\r\n            });\r\n\r\n            let maxVotes = 0;\r\n            let mostVotedAct = null;\r\n\r\n            Object.keys(voteCounts).forEach((actId) => {\r\n                if (voteCounts[actId] > maxVotes) {\r\n                    maxVotes = voteCounts[actId];\r\n                    mostVotedAct = acts.find((act) => act.id === actId);\r\n                }\r\n            });\r\n\r\n            if (mostVotedAct) {\r\n                alert(`The act with the most votes is: ${mostVotedAct.name}`);\r\n            }\r\n        }\r\n    }, [votes, acts]);\r\n\r\n    return (\r\n        <>\r\n            <h1>Board</h1>\r\n            {acts.map((act) => (\r\n                <ActGraph key={act.id} name={act.name} votes={0} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}