{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdalb\\\\Desktop\\\\dramainteractive\\\\dramainteractive\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Message from '../Components/Message';\nimport Sender from '../Components/Sender';\nimport { Route, Routes } from 'react-router-dom';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction Chat() {\n  _s();\n  const [username, setUsername] = useState(localStorage.getItem('username') || 'Anonymous');\n  const [messages, setMessages] = useState([]);\n  const [audienceChat, setAudienceChat] = useState(false);\n  useEffect(() => {\n    // Function to set the username\n    async function setUserName() {\n      const storedUsername = localStorage.getItem('username');\n      if (!storedUsername || storedUsername === 'Anonymous' || storedUsername === 'anonymous') {\n        const enteredUsername = prompt('Enter a username');\n        if (enteredUsername) {\n          localStorage.setItem('username', enteredUsername);\n          setUsername(enteredUsername);\n        }\n      }\n    }\n    setUserName();\n  }, []);\n  useEffect(() => {\n    // Subscribe to real-time inserts\n    const channels = supabase.channel('custom-inserts').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages'\n    }, payload => {\n      const newMessage = {\n        message: payload.new.message,\n        sender: payload.new.sender,\n        owner: payload.new.sender === username\n      };\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    }).subscribe();\n    const controls = supabase.channel('controller').on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'controls'\n    }, payload => {\n      const canChat = payload.new.audienceChat;\n      setAudienceChat(canChat);\n    }).subscribe();\n    return () => {\n      // Unsubscribe from channels when component unmounts\n      channels.unsubscribe();\n      controls.unsubscribe();\n    };\n  }, [username]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'grey',\n        fontSize: '1.5rem',\n        margin: '5px',\n        cursor: 'pointer'\n      },\n      onClick: () => {\n        const newUsername = prompt('Enter a new username', username);\n        if (newUsername) {\n          localStorage.setItem('username', newUsername);\n          setUsername(newUsername);\n        }\n      },\n      children: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chat\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start'\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: msg.message,\n        sender: msg.sender,\n        owner: msg.sender === username\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      username: username,\n      canChat: audienceChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Chat, \"9rgsi74OsSlIPxCwsfYsSy2Z6hM=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Message","Sender","Route","Routes","createClient","jsxDEV","_jsxDEV","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Chat","_s","username","setUsername","localStorage","getItem","messages","setMessages","audienceChat","setAudienceChat","setUserName","storedUsername","enteredUsername","prompt","setItem","channels","channel","on","event","schema","table","payload","newMessage","message","new","sender","owner","prevMessages","subscribe","controls","canChat","unsubscribe","children","style","color","fontSize","margin","cursor","onClick","newUsername","fileName","_jsxFileName","lineNumber","columnNumber","className","display","flexDirection","alignItems","justifyContent","map","msg","index","_c","$RefreshReg$"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Chat.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport Message from '../Components/Message';\r\nimport Sender from '../Components/Sender';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Chat() {\r\n    const [username, setUsername] = useState(localStorage.getItem('username') || 'Anonymous');\r\n    const [messages, setMessages] = useState([]);\r\n    const [audienceChat, setAudienceChat] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Function to set the username\r\n        async function setUserName() {\r\n            const storedUsername = localStorage.getItem('username');\r\n            if (!storedUsername || storedUsername === 'Anonymous' || storedUsername === 'anonymous') {\r\n                const enteredUsername = prompt('Enter a username');\r\n                if (enteredUsername) {\r\n                    localStorage.setItem('username', enteredUsername);\r\n                    setUsername(enteredUsername);\r\n                }\r\n            }\r\n        }\r\n        setUserName();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Subscribe to real-time inserts\r\n        const channels = supabase.channel('custom-inserts')\r\n            .on(\r\n                'postgres_changes',\r\n                { event: 'INSERT', schema: 'public', table: 'messages' },\r\n                (payload) => {\r\n                    const newMessage = {\r\n                        message: payload.new.message,\r\n                        sender: payload.new.sender,\r\n                        owner: payload.new.sender === username\r\n                    };\r\n                    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n                }\r\n            )\r\n            .subscribe();\r\n\r\n        const controls = supabase.channel('controller')\r\n            .on(\r\n                'postgres_changes',\r\n                { event: 'INSERT', schema: 'public', table: 'controls' },\r\n                (payload) => {\r\n                    const canChat = payload.new.audienceChat;\r\n                    setAudienceChat(canChat);\r\n                }\r\n            )\r\n            .subscribe();\r\n\r\n        return () => {\r\n            // Unsubscribe from channels when component unmounts\r\n            channels.unsubscribe();\r\n            controls.unsubscribe();\r\n        };\r\n    }, [username]);\r\n\r\n    return (\r\n        <>\r\n            <h1\r\n                style={{\r\n                    color: 'grey',\r\n                    fontSize: '1.5rem',\r\n                    margin: '5px',\r\n                    cursor: 'pointer'\r\n                }}\r\n                onClick={() => {\r\n                    const newUsername = prompt('Enter a new username', username);\r\n                    if (newUsername) {\r\n                        localStorage.setItem('username', newUsername);\r\n                        setUsername(newUsername);\r\n                    }\r\n                }}\r\n            >\r\n                {username}\r\n            </h1>\r\n            <div className=\"Chat\" style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: 'flex-start',\r\n                justifyContent: 'flex-start',\r\n            }}>\r\n                {messages.map((msg, index) => (\r\n                    <Message\r\n                        key={index}\r\n                        message={msg.message}\r\n                        sender={msg.sender}\r\n                        owner={msg.sender === username}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <Sender username={username} canChat={audienceChat} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}