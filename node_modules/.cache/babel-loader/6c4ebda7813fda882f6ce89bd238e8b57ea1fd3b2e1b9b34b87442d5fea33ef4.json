{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdalb\\\\Desktop\\\\dramainteractive\\\\dramainteractive\\\\src\\\\pages\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport { Route, Routes } from 'react-router-dom';\nimport { createClient } from '@supabase/supabase-js';\nimport ActButton from \"../Components/ActButton\";\nimport ActGraph from \"../Components/ActGraph\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction Board(props) {\n  _s();\n  const [acts, setActs] = useState([]);\n  const [votes, setVotes] = useState([]);\n\n  // Join a room/topic. Can be anything except for 'realtime'.\n  const channelA = supabase.channel('votes');\n\n  // Simple function to log any messages we receive\n  function messageReceived(payload) {\n    // console.log(payload)\n    setVotes([...votes, payload.payload.vote]);\n    console.log(`${votes.length} votes: `, votes);\n    const mostVoted = votes.reduce((prev, current) => prev[1] > current[1] ? prev : current);\n    if (mostVoted[1] > 0) alert(`${mostVoted[0]} has the most votes with ${mostVoted[1]}!`);\n  }\n\n  // Subscribe to the Channel\n  channelA.on('broadcast', {\n    event: 'vote'\n  }, payload => messageReceived(payload)).subscribe();\n  useEffect(() => {\n    async function fetchActs() {\n      const {\n        data,\n        error\n      } = await supabase.from('acts').select(\"*\");\n      if (error) {\n        console.error(\"Error fetching acts:\", error);\n      } else {\n        setActs(data);\n      }\n    }\n    fetchActs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), acts.map((act, index) => /*#__PURE__*/_jsxDEV(ActGraph, {\n      name: act.name,\n      votes: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n}\n_s(Board, \"/wX5KyGFE5vrOswvzsrogDY4CkI=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Route","Routes","createClient","ActButton","ActGraph","jsxDEV","_jsxDEV","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Board","props","_s","acts","setActs","votes","setVotes","channelA","channel","messageReceived","payload","vote","console","log","length","mostVoted","reduce","prev","current","alert","on","event","subscribe","fetchActs","data","error","from","select","children","fileName","_jsxFileName","lineNumber","columnNumber","map","act","index","name","_c","$RefreshReg$"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Board.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport ActButton from \"../Components/ActButton\";\r\nimport ActGraph from \"../Components/ActGraph\";\r\n\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Board(props) {\r\n    const [acts, setActs] = useState([]);\r\n\r\n    const [votes, setVotes] = useState([]);\r\n\r\n    // Join a room/topic. Can be anything except for 'realtime'.\r\n    const channelA = supabase.channel('votes')\r\n\r\n    // Simple function to log any messages we receive\r\n    function messageReceived(payload) {\r\n        // console.log(payload)\r\n        setVotes([...votes, payload.payload.vote])\r\n        console.log(`${votes.length} votes: `, votes)\r\n\r\n        const mostVoted = votes.reduce((prev, current) => (\r\n            prev[1] > current[1] ? prev : current\r\n        ));\r\n        if (mostVoted[1] > 0) alert(`${mostVoted[0]} has the most votes with ${mostVoted[1]}!`);\r\n\r\n    }\r\n\r\n    // Subscribe to the Channel\r\n    channelA\r\n        .on(\r\n            'broadcast',\r\n            { event: 'vote' },\r\n            (payload) => messageReceived(payload)\r\n        )\r\n        .subscribe()\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchActs() {\r\n            const { data, error } = await supabase.from('acts').select(\"*\");\r\n            if (error) {\r\n                console.error(\"Error fetching acts:\", error);\r\n            } else {\r\n                setActs(data);\r\n            }\r\n        }\r\n        fetchActs();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Board</h1>\r\n            {acts.map((act, index) => (\r\n                <ActGraph name={act.name} votes={0} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,YAAY;AACnB,SAASC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAChD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,WAAW,GAAG,kNAAkN;AACtO,MAAMC,QAAQ,GAAGT,YAAY,CAACO,WAAW,EAAEC,WAAW,CAAC;AAEvD,SAASE,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMoB,QAAQ,GAAGR,QAAQ,CAACS,OAAO,CAAC,OAAO,CAAC;;EAE1C;EACA,SAASC,eAAeA,CAACC,OAAO,EAAE;IAC9B;IACAJ,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEK,OAAO,CAACA,OAAO,CAACC,IAAI,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAE,GAAER,KAAK,CAACS,MAAO,UAAS,EAAET,KAAK,CAAC;IAE7C,MAAMU,SAAS,GAAGV,KAAK,CAACW,MAAM,CAAC,CAACC,IAAI,EAAEC,OAAO,KACzCD,IAAI,CAAC,CAAC,CAAC,GAAGC,OAAO,CAAC,CAAC,CAAC,GAAGD,IAAI,GAAGC,OACjC,CAAC;IACF,IAAIH,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEI,KAAK,CAAE,GAAEJ,SAAS,CAAC,CAAC,CAAE,4BAA2BA,SAAS,CAAC,CAAC,CAAE,GAAE,CAAC;EAE3F;;EAEA;EACAR,QAAQ,CACHa,EAAE,CACC,WAAW,EACX;IAAEC,KAAK,EAAE;EAAO,CAAC,EAChBX,OAAO,IAAKD,eAAe,CAACC,OAAO,CACxC,CAAC,CACAY,SAAS,CAAC,CAAC;EAGhBpC,SAAS,CAAC,MAAM;IACZ,eAAeqC,SAASA,CAAA,EAAG;MACvB,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,CAAC,MAAM,CAAC,CAACC,MAAM,CAAC,GAAG,CAAC;MAC/D,IAAIF,KAAK,EAAE;QACPb,OAAO,CAACa,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD,CAAC,MAAM;QACHrB,OAAO,CAACoB,IAAI,CAAC;MACjB;IACJ;IACAD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI7B,OAAA,CAAAE,SAAA;IAAAgC,QAAA,gBACIlC,OAAA;MAAAkC,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACb7B,IAAI,CAAC8B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACjBzC,OAAA,CAACF,QAAQ;MAAC4C,IAAI,EAAEF,GAAG,CAACE,IAAK;MAAC/B,KAAK,EAAE;IAAE;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACxC,CAAC;EAAA,eACJ,CAAC;AAEX;AAAC9B,EAAA,CAnDQF,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AAqDd,eAAeA,KAAK;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}