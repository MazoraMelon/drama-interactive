{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdalb\\\\Desktop\\\\dramainteractive\\\\dramainteractive\\\\src\\\\pages\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport { Route, Routes } from 'react-router-dom';\nimport { createClient } from '@supabase/supabase-js';\nimport ActButton from \"../Components/ActButton\";\nimport ActGraph from \"../Components/ActGraph\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\nconst supabase = createClient(supabaseUrl, supabaseKey);\nfunction Board(props) {\n  _s();\n  const [acts, setActs] = useState([]);\n  const [votes, setVotes] = useState([]);\n  const [mostVoted, setMostVoted] = useState(\"None\");\n\n  // Join a room/topic. Can be anything except for 'realtime'.\n  const channelA = supabase.channel('votes');\n\n  // Function to update most voted act\n  const updateMostVoted = newVotes => {\n    // Find which person was most voted\n    const mostVotedAct = newVotes.reduce((prev, curr) => (prev.count || 0) > (curr.count || 0) ? prev : curr, {});\n    setMostVoted(mostVotedAct.name || \"None\");\n  };\n\n  // Subscribe to the Channel\n  useEffect(() => {\n    const messageReceived = payload => {\n      // Update votes state\n      setVotes(prevVotes => [...prevVotes, payload.payload.vote]);\n    };\n    channelA.on('broadcast', {\n      event: 'vote'\n    }, messageReceived).subscribe();\n    return () => {\n      // Clean up subscription on unmount\n      channelA.off('broadcast', messageReceived);\n    };\n  }, []);\n\n  // Fetch acts on component mount\n  useEffect(() => {\n    async function fetchActs() {\n      const {\n        data,\n        error\n      } = await supabase.from('acts').select(\"*\");\n      if (error) {\n        console.error(\"Error fetching acts:\", error);\n      } else {\n        setActs(data);\n      }\n    }\n    fetchActs();\n  }, []);\n\n  // Update most voted whenever votes change\n  useEffect(() => {\n    updateMostVoted(votes);\n  }, [votes]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), acts.map((act, index) => /*#__PURE__*/_jsxDEV(ActGraph, {\n      name: act.name,\n      votes: 0\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"mostvoted\",\n      children: [\"Most voted: \", mostVoted]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"rLEB5zFxZCUNqZ3c9v3rglFhl9s=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Route","Routes","createClient","ActButton","ActGraph","jsxDEV","_jsxDEV","Fragment","_Fragment","supabaseUrl","supabaseKey","supabase","Board","props","_s","acts","setActs","votes","setVotes","mostVoted","setMostVoted","channelA","channel","updateMostVoted","newVotes","mostVotedAct","reduce","prev","curr","count","name","messageReceived","payload","prevVotes","vote","on","event","subscribe","off","fetchActs","data","error","from","select","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","act","index","id","_c","$RefreshReg$"],"sources":["C:/Users/mdalb/Desktop/dramainteractive/dramainteractive/src/pages/Board.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport ActButton from \"../Components/ActButton\";\r\nimport ActGraph from \"../Components/ActGraph\";\r\n\r\nconst supabaseUrl = \"https://jftaxymlbutkjoacvtbk.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpmdGF4eW1sYnV0a2pvYWN2dGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTM5NjkxOTMsImV4cCI6MjAyOTU0NTE5M30.2aT1UzmiN34aKLNRUXAKwhKfnuwxMoiM3eMkHs1oyZU\";\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nfunction Board(props) {\r\n    const [acts, setActs] = useState([]);\r\n    const [votes, setVotes] = useState([]);\r\n    const [mostVoted, setMostVoted] = useState(\"None\");\r\n\r\n    // Join a room/topic. Can be anything except for 'realtime'.\r\n    const channelA = supabase.channel('votes');\r\n\r\n    // Function to update most voted act\r\n    const updateMostVoted = (newVotes) => {\r\n        // Find which person was most voted\r\n        const mostVotedAct = newVotes.reduce((prev, curr) => (prev.count || 0) > (curr.count || 0) ? prev : curr, {});\r\n        setMostVoted(mostVotedAct.name || \"None\");\r\n    };\r\n\r\n    // Subscribe to the Channel\r\n    useEffect(() => {\r\n        const messageReceived = (payload) => {\r\n            // Update votes state\r\n            setVotes((prevVotes) => [...prevVotes, payload.payload.vote]);\r\n        };\r\n\r\n        channelA.on('broadcast', { event: 'vote' }, messageReceived).subscribe();\r\n\r\n        return () => {\r\n            // Clean up subscription on unmount\r\n            channelA.off('broadcast', messageReceived);\r\n        };\r\n    }, []);\r\n\r\n    // Fetch acts on component mount\r\n    useEffect(() => {\r\n        async function fetchActs() {\r\n            const { data, error } = await supabase.from('acts').select(\"*\");\r\n            if (error) {\r\n                console.error(\"Error fetching acts:\", error);\r\n            } else {\r\n                setActs(data);\r\n            }\r\n        }\r\n        fetchActs();\r\n    }, []);\r\n\r\n    // Update most voted whenever votes change\r\n    useEffect(() => {\r\n        updateMostVoted(votes);\r\n    }, [votes]);\r\n\r\n    return (\r\n        <>\r\n            <h1>Board</h1>\r\n            {acts.map((act, index) => (\r\n                <ActGraph key={index} name={act.name} votes={0} />\r\n            ))}\r\n            <h1 id=\"mostvoted\">Most voted: {mostVoted}</h1>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}